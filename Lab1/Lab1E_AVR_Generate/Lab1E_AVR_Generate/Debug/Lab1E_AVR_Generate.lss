
Lab1E_AVR_Generate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a2  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d7  00000000  00000000  00000ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  00001199  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b2  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000192a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  8e:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init>:
}


void init(){
	// usart init
	UCSR0B=(1<<TXEN0)|(1<<RXEN0);// Transmitter Enable and Receiver Enable
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);// 8-bit character
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0=UBRR;//9600 Baud rate
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// pwm init
	TCCR0A=(1<<COM0B1)|(1<<WGM01)|(1<<WGM00);
  ae:	83 e2       	ldi	r24, 0x23	; 35
  b0:	84 bd       	out	0x24, r24	; 36
	// COM0A1, COM0A0, COM0B1 and COM0B0 control the behavior of the OCOA (PD6) and OCOB(PD5) pins
	// These pins can be controlled from the Output Compare Registers (OCR0A/OCR0B)
	// WGM02, WGM01, WGM00 = 1,1,1 -> Fast PWM, TOP is OCRA,
	TCCR0B=(1<<WGM02)|(1<<CS02);
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	85 bd       	out	0x25, r24	; 37
	
	OCR0A=PWM_CACL; //500Hz PWM
  b6:	87 ea       	ldi	r24, 0xA7	; 167
  b8:	87 bd       	out	0x27, r24	; 39
	OCR0B=0; //No duty Cycle at the beginning
  ba:	18 bc       	out	0x28, r1	; 40
	DDRD=(1<<5); //PD5 (OC0B) output
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	8a b9       	out	0x0a, r24	; 10
  c0:	08 95       	ret

000000c2 <USART_Transmit>:




void USART_Transmit(char data) {
	while( !( UCSR0A & (1<<UDRE0)) );
  c2:	e0 ec       	ldi	r30, 0xC0	; 192
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	95 ff       	sbrs	r25, 5
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <USART_Transmit+0x4>
	UDR0 = data;
  cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d0:	08 95       	ret

000000d2 <USART_Receive>:
}

unsigned char USART_Receive(void){
	while( !( UCSR0A & (1<<RXC0)) );
  d2:	e0 ec       	ldi	r30, 0xC0	; 192
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <USART_Receive+0x4>
	return UDR0;
  dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  e0:	08 95       	ret

000000e2 <main>:
void USART_Transmit(char data);
unsigned char USART_Receive(void);
void USART_ReceiveNSendBackCapital(void);

int main(void)
{	
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	68 97       	sbiw	r28, 0x18	; 24
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char readyString[] = "Received pulse number: ";
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	de 01       	movw	r26, r28
  fe:	11 96       	adiw	r26, 0x01	; 1
 100:	01 90       	ld	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	8a 95       	dec	r24
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x1e>
	unsigned char resultString[] = "Width of the pulse is: ";
	unsigned int pulse_width = 0;
	unsigned char buf;
	unsigned char width;
	init();
 108:	0e 94 4b 00 	call	0x96	; 0x96 <init>

    /* Replace with your application code */
    while (1) 
    {
		pulse_width = 0;
 10c:	81 2c       	mov	r8, r1
 10e:	91 2c       	mov	r9, r1
			if(buf >= '0' && buf <= '9') {
				pulse_width = pulse_width * 10 + buf - '0';  
			}
		}

		for(int i=0;i<strlen(readyString);i++)
 110:	ce 01       	movw	r24, r28
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	6c 01       	movw	r12, r24
	init();

    /* Replace with your application code */
    while (1) 
    {
		pulse_width = 0;
 116:	08 2d       	mov	r16, r8
 118:	19 2d       	mov	r17, r9
		while(pulse_width < 10) {
			buf = USART_Receive();
 11a:	0e 94 69 00 	call	0xd2	; 0xd2 <USART_Receive>
			if(buf >= '0' && buf <= '9') {
 11e:	90 ed       	ldi	r25, 0xD0	; 208
 120:	98 0f       	add	r25, r24
 122:	9a 30       	cpi	r25, 0x0A	; 10
 124:	78 f4       	brcc	.+30     	; 0x144 <main+0x62>
				pulse_width = pulse_width * 10 + buf - '0';  
 126:	98 01       	movw	r18, r16
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	00 0f       	add	r16, r16
 12e:	11 1f       	adc	r17, r17
 130:	00 0f       	add	r16, r16
 132:	11 1f       	adc	r17, r17
 134:	00 0f       	add	r16, r16
 136:	11 1f       	adc	r17, r17
 138:	02 0f       	add	r16, r18
 13a:	13 1f       	adc	r17, r19
 13c:	08 0f       	add	r16, r24
 13e:	11 1d       	adc	r17, r1
 140:	00 53       	subi	r16, 0x30	; 48
 142:	11 09       	sbc	r17, r1

    /* Replace with your application code */
    while (1) 
    {
		pulse_width = 0;
		while(pulse_width < 10) {
 144:	0a 30       	cpi	r16, 0x0A	; 10
 146:	11 05       	cpc	r17, r1
 148:	40 f3       	brcs	.-48     	; 0x11a <main+0x38>
 14a:	fe 01       	movw	r30, r28
 14c:	31 96       	adiw	r30, 0x01	; 1
 14e:	5f 01       	movw	r10, r30
 150:	e1 2c       	mov	r14, r1
 152:	f1 2c       	mov	r15, r1
 154:	08 c0       	rjmp	.+16     	; 0x166 <main+0x84>
			}
		}

		for(int i=0;i<strlen(readyString);i++)
		{
			USART_Transmit(readyString[i]);
 156:	f5 01       	movw	r30, r10
 158:	81 91       	ld	r24, Z+
 15a:	5f 01       	movw	r10, r30
 15c:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
			if(buf >= '0' && buf <= '9') {
				pulse_width = pulse_width * 10 + buf - '0';  
			}
		}

		for(int i=0;i<strlen(readyString);i++)
 160:	ff ef       	ldi	r31, 0xFF	; 255
 162:	ef 1a       	sub	r14, r31
 164:	ff 0a       	sbc	r15, r31
 166:	f6 01       	movw	r30, r12
 168:	01 90       	ld	r0, Z+
 16a:	00 20       	and	r0, r0
 16c:	e9 f7       	brne	.-6      	; 0x168 <main+0x86>
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	ec 19       	sub	r30, r12
 172:	fd 09       	sbc	r31, r13
 174:	ee 16       	cp	r14, r30
 176:	ff 06       	cpc	r15, r31
 178:	70 f3       	brcs	.-36     	; 0x156 <main+0x74>
		{
			USART_Transmit(readyString[i]);
		}

		USART_Transmit(pulse_width / 10 + '0');
 17a:	98 01       	movw	r18, r16
 17c:	ad ec       	ldi	r26, 0xCD	; 205
 17e:	bc ec       	ldi	r27, 0xCC	; 204
 180:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__umulhisi3>
 184:	7c 01       	movw	r14, r24
 186:	f6 94       	lsr	r15
 188:	e7 94       	ror	r14
 18a:	f6 94       	lsr	r15
 18c:	e7 94       	ror	r14
 18e:	f6 94       	lsr	r15
 190:	e7 94       	ror	r14
 192:	80 e3       	ldi	r24, 0x30	; 48
 194:	8e 0d       	add	r24, r14
 196:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
		USART_Transmit(pulse_width % 10 + '0');
 19a:	c7 01       	movw	r24, r14
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	ee 0c       	add	r14, r14
 1a2:	ff 1c       	adc	r15, r15
 1a4:	ee 0c       	add	r14, r14
 1a6:	ff 1c       	adc	r15, r15
 1a8:	ee 0c       	add	r14, r14
 1aa:	ff 1c       	adc	r15, r15
 1ac:	e8 0e       	add	r14, r24
 1ae:	f9 1e       	adc	r15, r25
 1b0:	c8 01       	movw	r24, r16
 1b2:	8e 19       	sub	r24, r14
 1b4:	9f 09       	sbc	r25, r15
 1b6:	80 5d       	subi	r24, 0xD0	; 208
 1b8:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
		USART_Transmit(' ');
 1bc:	80 e2       	ldi	r24, 0x20	; 32
 1be:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
			
	 
		OCR0B=pulse_width-1;
 1c2:	01 50       	subi	r16, 0x01	; 1
 1c4:	08 bd       	out	0x28, r16	; 40
		 // code for measure pulse width 
		pulse_width = 0;
    }
 1c6:	a7 cf       	rjmp	.-178    	; 0x116 <main+0x34>

000001c8 <__umulhisi3>:
 1c8:	a2 9f       	mul	r26, r18
 1ca:	b0 01       	movw	r22, r0
 1cc:	b3 9f       	mul	r27, r19
 1ce:	c0 01       	movw	r24, r0
 1d0:	a3 9f       	mul	r26, r19
 1d2:	70 0d       	add	r23, r0
 1d4:	81 1d       	adc	r24, r1
 1d6:	11 24       	eor	r1, r1
 1d8:	91 1d       	adc	r25, r1
 1da:	b2 9f       	mul	r27, r18
 1dc:	70 0d       	add	r23, r0
 1de:	81 1d       	adc	r24, r1
 1e0:	11 24       	eor	r1, r1
 1e2:	91 1d       	adc	r25, r1
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
