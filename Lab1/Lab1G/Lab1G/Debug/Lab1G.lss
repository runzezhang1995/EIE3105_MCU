
Lab1G.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000238  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f6  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  000009ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002de  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035a  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000070  00000000  00000000  000016b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001722  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
	{
	}
}

void init(){
	TCCR0A = (1<<COM0A1)|(1<<COM0B1)|(1<<WGM01)|(1<<WGM00); //Timer 0 Fast PWM Mode
  90:	83 ea       	ldi	r24, 0xA3	; 163
  92:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<WGM02)|(1<<CS02); //Timer 0 Fast PWM, Prescaler 256
  94:	9c e0       	ldi	r25, 0x0C	; 12
  96:	95 bd       	out	0x25, r25	; 37
	OCR0A = PWM_CACL;
  98:	97 ea       	ldi	r25, 0xA7	; 167
  9a:	97 bd       	out	0x27, r25	; 39

	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11)|(1<<WGM10);
  9c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<WGM13)|(1<<WGM12)|(1<CS12);
  a0:	29 e1       	ldi	r18, 0x19	; 25
  a2:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = PWM_CACL;
  a6:	27 ea       	ldi	r18, 0xA7	; 167
  a8:	3b ee       	ldi	r19, 0xEB	; 235
  aa:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ae:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	TCCR2A = (1<<COM2A1)|(1<<COM2B1)|(1<<WGM21)|(1<<WGM20);
  b2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = (1<<WGM22)|(1<<CS22)|(1<<CS21);
  b6:	8e e0       	ldi	r24, 0x0E	; 14
  b8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = PWM_CACL;
  bc:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

	DDRB |= (1<<2); // PortB.2 output for PWM
  c0:	22 9a       	sbi	0x04, 2	; 4
	DDRD |= (1<<5)|(1<<3); // PortD.3, 5 output for PWM
  c2:	8a b1       	in	r24, 0x0a	; 10
  c4:	88 62       	ori	r24, 0x28	; 40
  c6:	8a b9       	out	0x0a, r24	; 10
	DDRC = (~(1<<0))&(~(1<<1))&(~(1<<2)); // PortC.0, 1, 2 as input for ADC
  c8:	88 ef       	ldi	r24, 0xF8	; 248
  ca:	87 b9       	out	0x07, r24	; 7

	ADCSRA= (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Make ADC enable and interrupt select ck/128. The higher the better
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	8f e8       	ldi	r24, 0x8F	; 143
  d2:	80 83       	st	Z, r24
	ADMUX = (1<<REFS1)|(1<<REFS0)|(1<<ADLAR);//Internal 1.1Vref. and ADC0 single Ended Input, input LEFT-justified data
  d4:	80 ee       	ldi	r24, 0xE0	; 224
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	sei();
  da:	78 94       	sei
	ADCSRA |= (1<<ADSC);//start conversion
  dc:	80 81       	ld	r24, Z
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <main>:
void init();

int main(void)
{
	/* Replace with your application code */
	init();
  e4:	0e 94 48 00 	call	0x90	; 0x90 <init>
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <main+0x4>

000000ea <__vector_21>:
	ADMUX = (1<<REFS1)|(1<<REFS0)|(1<<ADLAR);//Internal 1.1Vref. and ADC0 single Ended Input, input LEFT-justified data
	sei();
	ADCSRA |= (1<<ADSC);//start conversion
}

ISR(ADC_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	// The brighter, the resistor will decrease, the voltage of resistor will decrease the voltage of ADC will increase, the value of ADC will be bigger
	LowBYTE = ADCL;
  fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 102:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <LowBYTE>
	HighBYTE = ADCH;
 106:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 10a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <HighBYTE>
	if (ADCnum==0){
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	91 f4       	brne	.+36     	; 0x13e <__vector_21+0x54>
		if (HighBYTE < reference){
 11a:	22 30       	cpi	r18, 0x02	; 2
 11c:	10 f4       	brcc	.+4      	; 0x122 <__vector_21+0x38>
			OCR0B = 0;
 11e:	18 bc       	out	0x28, r1	; 40
 120:	02 c0       	rjmp	.+4      	; 0x126 <__vector_21+0x3c>
		}
		else{
			OCR0B = PWM_CACL;
 122:	87 ea       	ldi	r24, 0xA7	; 167
 124:	88 bd       	out	0x28, r24	; 40
		}
		ADMUX |= (1<<MUX0); //Next Step ADC1 Single Ended Input
 126:	ec e7       	ldi	r30, 0x7C	; 124
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24
		ADCnum = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 13c:	32 c0       	rjmp	.+100    	; 0x1a2 <__vector_21+0xb8>
	}
	else if (ADCnum==1){
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	91 05       	cpc	r25, r1
 142:	e1 f4       	brne	.+56     	; 0x17c <__vector_21+0x92>
		if (HighBYTE < reference){
 144:	22 30       	cpi	r18, 0x02	; 2
 146:	28 f4       	brcc	.+10     	; 0x152 <__vector_21+0x68>
			OCR1B = 0;
 148:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 14c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 150:	06 c0       	rjmp	.+12     	; 0x15e <__vector_21+0x74>
		}
		else{
			OCR1B = PWM_CACL;
 152:	87 ea       	ldi	r24, 0xA7	; 167
 154:	9b ee       	ldi	r25, 0xEB	; 235
 156:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 15a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		}
		ADMUX &= ~(1<<MUX0);
 15e:	ec e7       	ldi	r30, 0x7C	; 124
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	8e 7f       	andi	r24, 0xFE	; 254
 166:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX1); //Next Step ADC2 Single Ended Input
 168:	80 81       	ld	r24, Z
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	80 83       	st	Z, r24
		ADCnum=2;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 17a:	13 c0       	rjmp	.+38     	; 0x1a2 <__vector_21+0xb8>
	}
	else if(ADCnum==2){
 17c:	02 97       	sbiw	r24, 0x02	; 2
 17e:	89 f4       	brne	.+34     	; 0x1a2 <__vector_21+0xb8>
		if (HighBYTE < reference){
 180:	22 30       	cpi	r18, 0x02	; 2
 182:	18 f4       	brcc	.+6      	; 0x18a <__vector_21+0xa0>
			OCR2B = 0;
 184:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
 188:	03 c0       	rjmp	.+6      	; 0x190 <__vector_21+0xa6>
		}
		else{
			OCR2B=PWM_CACL;
 18a:	87 ea       	ldi	r24, 0xA7	; 167
 18c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		}
		ADMUX &= ~(1<<MUX1);
 190:	ec e7       	ldi	r30, 0x7C	; 124
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8d 7f       	andi	r24, 0xFD	; 253
 198:	80 83       	st	Z, r24
		//Next Step ADC0 Single Ended Input
		ADCnum=0;
 19a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 19e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	ADCSRA |= (1<<ADSC); //start conversion
 1a2:	ea e7       	ldi	r30, 0x7A	; 122
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	80 83       	st	Z, r24
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
