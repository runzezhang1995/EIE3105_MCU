
Lab1B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000002be  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000843  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e2  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d4  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  8e:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init>:
}


void init(){
	// usart init
	UCSR0B=(1<<TXEN0)|(1<<RXEN0);// Transmitter Enable and Receiver Enable
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);// 8-bit character
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0=UBRR;//9600 Baud rate
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	// pwm init
	TCCR0A=(1<<COM0B1)|(1<<WGM01)|(1<<WGM00);
  ae:	83 e2       	ldi	r24, 0x23	; 35
  b0:	84 bd       	out	0x24, r24	; 36
	// COM0A1, COM0A0, COM0B1 and COM0B0 control the behavior of the OCOA (PD6) and OCOB(PD5) pins
	// These pins can be controlled from the Output Compare Registers (OCR0A/OCR0B)
	// WGM02, WGM01, WGM00 = 1,1,1 -> Fast PWM, TOP is OCRA,
	TCCR0B=(1<<WGM02)|(1<<CS02);
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	85 bd       	out	0x25, r24	; 37
	
	OCR0A=PWM_CACL; //500Hz PWM
  b6:	87 ea       	ldi	r24, 0xA7	; 167
  b8:	87 bd       	out	0x27, r24	; 39
	OCR0B=0; //No duty Cycle at the beginning
  ba:	18 bc       	out	0x28, r1	; 40
	DDRD=(1<<5); //PD5 (OC0B) output
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	8a b9       	out	0x0a, r24	; 10
  c0:	08 95       	ret

000000c2 <USART_Transmit>:




void USART_Transmit(char data) {
	while( !( UCSR0A & (1<<UDRE0)) );
  c2:	e0 ec       	ldi	r30, 0xC0	; 192
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	95 ff       	sbrs	r25, 5
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <USART_Transmit+0x4>
	UDR0 = data;
  cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d0:	08 95       	ret

000000d2 <USART_Receive>:
}

unsigned char USART_Receive(void){
	while( !( UCSR0A & (1<<RXC0)) );
  d2:	e0 ec       	ldi	r30, 0xC0	; 192
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <USART_Receive+0x4>
	return UDR0;
  dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  e0:	08 95       	ret

000000e2 <main>:
void USART_Transmit(char data);
unsigned char USART_Receive(void);
void USART_ReceiveNSendBackCapital(void);

int main(void)
{	
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	e0 97       	sbiw	r28, 0x30	; 48
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char readyString[] = "Received pulse number: ";
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	de 01       	movw	r26, r28
  fe:	11 96       	adiw	r26, 0x01	; 1
 100:	01 90       	ld	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	8a 95       	dec	r24
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x1e>
	unsigned char resultString[] = "Width of the pulse is: ";
 108:	88 e1       	ldi	r24, 0x18	; 24
 10a:	e8 e1       	ldi	r30, 0x18	; 24
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	de 01       	movw	r26, r28
 110:	59 96       	adiw	r26, 0x19	; 25
 112:	01 90       	ld	r0, Z+
 114:	0d 92       	st	X+, r0
 116:	8a 95       	dec	r24
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x30>
	unsigned int pulse_width = 0;
	unsigned char buf;
	unsigned char width;
	init();
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <init>
int main(void)
{	
	
	unsigned char readyString[] = "Received pulse number: ";
	unsigned char resultString[] = "Width of the pulse is: ";
	unsigned int pulse_width = 0;
 11e:	81 2c       	mov	r8, r1
 120:	91 2c       	mov	r9, r1
			if(buf >= '0' && buf <= '9') {
				pulse_width = pulse_width * 10 + buf - '0';  
			}
		}

		for(int i=0;i<strlen(readyString);i++)
 122:	ce 01       	movw	r24, r28
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	6c 01       	movw	r12, r24
		When the ICES1 bit is written to zero, a falling (negative) edge is used as trigger, and
		when the ICES1 bit is written to one, a rising (positive) edge will trigger the capture.
		*/
		DDRB &= ~(1<<0); //PB0 (ICP1) Input
		PORTB=1;//Pull-up;
		TCCR1A=0; //Timer Mode = normal
 128:	68 94       	set
 12a:	22 24       	eor	r2, r2
 12c:	27 f8       	bld	r2, 7
 12e:	31 2c       	mov	r3, r1
		TCCR1B=(1<<ICES1)|(1<<CS12)| (0<<CS11) | (0<<CS10); //Rising edge, prescaler=256, no noise canceller
 130:	0f 2e       	mov	r0, r31
 132:	f1 e8       	ldi	r31, 0x81	; 129
 134:	6f 2e       	mov	r6, r31
 136:	71 2c       	mov	r7, r1
 138:	f0 2d       	mov	r31, r0
		TIFR1=(1<<ICF1);//Clear input capture flag 
		while((TIFR1&(1<<ICF1))==0); //wait until ICF1 is set 
		width=ICR1L;
 13a:	0f 2e       	mov	r0, r31
 13c:	f6 e8       	ldi	r31, 0x86	; 134
 13e:	4f 2e       	mov	r4, r31
 140:	51 2c       	mov	r5, r1
 142:	f0 2d       	mov	r31, r0
		TCCR1B=(0<<ICES1) | (1<<CS12) | (0<<CS11) | (0<<CS10) ;//Falling edge, prescaler 256
		while((TIFR1&(1<<ICF1))==0); //Wait until capture
		width	=ICR1L-width; //Capture and pulse width = falling - rising
		TIFR1=(1<<ICF1); //Clear ICF1 

		for(int i=0; i<strlen(resultString);i++){
 144:	7e 01       	movw	r14, r28
 146:	99 e1       	ldi	r25, 0x19	; 25
 148:	e9 0e       	add	r14, r25
 14a:	f1 1c       	adc	r15, r1
 14c:	16 c0       	rjmp	.+44     	; 0x17a <main+0x98>
		



		while(pulse_width < 10) {
			buf = USART_Receive();
 14e:	0e 94 69 00 	call	0xd2	; 0xd2 <USART_Receive>
			if(buf >= '0' && buf <= '9') {
 152:	90 ed       	ldi	r25, 0xD0	; 208
 154:	98 0f       	add	r25, r24
 156:	9a 30       	cpi	r25, 0x0A	; 10
 158:	80 f4       	brcc	.+32     	; 0x17a <main+0x98>
 15a:	94 01       	movw	r18, r8
 15c:	22 0f       	add	r18, r18
 15e:	33 1f       	adc	r19, r19
 160:	88 0c       	add	r8, r8
 162:	99 1c       	adc	r9, r9
 164:	88 0c       	add	r8, r8
 166:	99 1c       	adc	r9, r9
 168:	88 0c       	add	r8, r8
 16a:	99 1c       	adc	r9, r9
 16c:	82 0e       	add	r8, r18
 16e:	93 1e       	adc	r9, r19
 170:	e0 e3       	ldi	r30, 0x30	; 48
 172:	8e 1a       	sub	r8, r30
 174:	91 08       	sbc	r9, r1
				pulse_width = pulse_width * 10 + buf - '0';  
 176:	88 0e       	add	r8, r24
 178:	91 1c       	adc	r9, r1
		//USART_ReceiveNSendBackCapital();
		



		while(pulse_width < 10) {
 17a:	fa e0       	ldi	r31, 0x0A	; 10
 17c:	8f 16       	cp	r8, r31
 17e:	91 04       	cpc	r9, r1
 180:	30 f3       	brcs	.-52     	; 0x14e <main+0x6c>
 182:	ce 01       	movw	r24, r28
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	5c 01       	movw	r10, r24
 188:	00 e0       	ldi	r16, 0x00	; 0
 18a:	10 e0       	ldi	r17, 0x00	; 0
 18c:	07 c0       	rjmp	.+14     	; 0x19c <main+0xba>
			}
		}

		for(int i=0;i<strlen(readyString);i++)
		{
			USART_Transmit(readyString[i]);
 18e:	f5 01       	movw	r30, r10
 190:	81 91       	ld	r24, Z+
 192:	5f 01       	movw	r10, r30
 194:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
			if(buf >= '0' && buf <= '9') {
				pulse_width = pulse_width * 10 + buf - '0';  
			}
		}

		for(int i=0;i<strlen(readyString);i++)
 198:	0f 5f       	subi	r16, 0xFF	; 255
 19a:	1f 4f       	sbci	r17, 0xFF	; 255
 19c:	f6 01       	movw	r30, r12
 19e:	01 90       	ld	r0, Z+
 1a0:	00 20       	and	r0, r0
 1a2:	e9 f7       	brne	.-6      	; 0x19e <main+0xbc>
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	ec 19       	sub	r30, r12
 1a8:	fd 09       	sbc	r31, r13
 1aa:	0e 17       	cp	r16, r30
 1ac:	1f 07       	cpc	r17, r31
 1ae:	78 f3       	brcs	.-34     	; 0x18e <main+0xac>
		{
			USART_Transmit(readyString[i]);
		}

		USART_Transmit(pulse_width / 10 + '0');
 1b0:	94 01       	movw	r18, r8
 1b2:	ad ec       	ldi	r26, 0xCD	; 205
 1b4:	bc ec       	ldi	r27, 0xCC	; 204
 1b6:	0e 94 4e 01 	call	0x29c	; 0x29c <__umulhisi3>
 1ba:	8c 01       	movw	r16, r24
 1bc:	16 95       	lsr	r17
 1be:	07 95       	ror	r16
 1c0:	16 95       	lsr	r17
 1c2:	07 95       	ror	r16
 1c4:	16 95       	lsr	r17
 1c6:	07 95       	ror	r16
 1c8:	80 e3       	ldi	r24, 0x30	; 48
 1ca:	80 0f       	add	r24, r16
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
		USART_Transmit(pulse_width % 10 + '0');
 1d0:	c8 01       	movw	r24, r16
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	00 0f       	add	r16, r16
 1d8:	11 1f       	adc	r17, r17
 1da:	00 0f       	add	r16, r16
 1dc:	11 1f       	adc	r17, r17
 1de:	00 0f       	add	r16, r16
 1e0:	11 1f       	adc	r17, r17
 1e2:	08 0f       	add	r16, r24
 1e4:	19 1f       	adc	r17, r25
 1e6:	c4 01       	movw	r24, r8
 1e8:	80 1b       	sub	r24, r16
 1ea:	91 0b       	sbc	r25, r17
 1ec:	80 5d       	subi	r24, 0xD0	; 208
 1ee:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
		USART_Transmit(' ');
 1f2:	80 e2       	ldi	r24, 0x20	; 32
 1f4:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
			
	 
		OCR0B=pulse_width-1;
 1f8:	8a 94       	dec	r8
 1fa:	88 bc       	out	0x28, r8	; 40
		
		/*ICES1
		When the ICES1 bit is written to zero, a falling (negative) edge is used as trigger, and
		when the ICES1 bit is written to one, a rising (positive) edge will trigger the capture.
		*/
		DDRB &= ~(1<<0); //PB0 (ICP1) Input
 1fc:	20 98       	cbi	0x04, 0	; 4
		PORTB=1;//Pull-up;
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	f5 b9       	out	0x05, r31	; 5
		TCCR1A=0; //Timer Mode = normal
 202:	f1 01       	movw	r30, r2
 204:	10 82       	st	Z, r1
		TCCR1B=(1<<ICES1)|(1<<CS12)| (0<<CS11) | (0<<CS10); //Rising edge, prescaler=256, no noise canceller
 206:	84 e4       	ldi	r24, 0x44	; 68
 208:	f3 01       	movw	r30, r6
 20a:	80 83       	st	Z, r24
		TIFR1=(1<<ICF1);//Clear input capture flag 
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	86 bb       	out	0x16, r24	; 22
		while((TIFR1&(1<<ICF1))==0); //wait until ICF1 is set 
 210:	b5 9b       	sbis	0x16, 5	; 22
 212:	fe cf       	rjmp	.-4      	; 0x210 <main+0x12e>
		width=ICR1L;
 214:	f2 01       	movw	r30, r4
 216:	90 81       	ld	r25, Z
		/* ICF1 
		This flag is set when a capture event occurs on the ICP1 pin. When the Input Capture Register
		(ICR1) is set by the WGM13:0 to be used as the TOP value, the ICF1 Flag is set when the counter
		reaches the TOP value.
		*/
		TIFR1=(1<<ICF1);//Clear Flag
 218:	80 e2       	ldi	r24, 0x20	; 32
 21a:	86 bb       	out	0x16, r24	; 22
		TCCR1B=(0<<ICES1) | (1<<CS12) | (0<<CS11) | (0<<CS10) ;//Falling edge, prescaler 256
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	f3 01       	movw	r30, r6
 220:	80 83       	st	Z, r24
		while((TIFR1&(1<<ICF1))==0); //Wait until capture
 222:	b5 9b       	sbis	0x16, 5	; 22
 224:	fe cf       	rjmp	.-4      	; 0x222 <main+0x140>
		width	=ICR1L-width; //Capture and pulse width = falling - rising
 226:	f2 01       	movw	r30, r4
 228:	90 80       	ld	r9, Z
 22a:	99 1a       	sub	r9, r25
		TIFR1=(1<<ICF1); //Clear ICF1 
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	86 bb       	out	0x16, r24	; 22
 230:	5e 01       	movw	r10, r28
 232:	f9 e1       	ldi	r31, 0x19	; 25
 234:	af 0e       	add	r10, r31
 236:	b1 1c       	adc	r11, r1

		for(int i=0; i<strlen(resultString);i++){
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	07 c0       	rjmp	.+14     	; 0x24c <main+0x16a>
			USART_Transmit(resultString[i]);
 23e:	f5 01       	movw	r30, r10
 240:	81 91       	ld	r24, Z+
 242:	5f 01       	movw	r10, r30
 244:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
		TCCR1B=(0<<ICES1) | (1<<CS12) | (0<<CS11) | (0<<CS10) ;//Falling edge, prescaler 256
		while((TIFR1&(1<<ICF1))==0); //Wait until capture
		width	=ICR1L-width; //Capture and pulse width = falling - rising
		TIFR1=(1<<ICF1); //Clear ICF1 

		for(int i=0; i<strlen(resultString);i++){
 248:	0f 5f       	subi	r16, 0xFF	; 255
 24a:	1f 4f       	sbci	r17, 0xFF	; 255
 24c:	f7 01       	movw	r30, r14
 24e:	01 90       	ld	r0, Z+
 250:	00 20       	and	r0, r0
 252:	e9 f7       	brne	.-6      	; 0x24e <main+0x16c>
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	ee 19       	sub	r30, r14
 258:	ff 09       	sbc	r31, r15
 25a:	0e 17       	cp	r16, r30
 25c:	1f 07       	cpc	r17, r31
 25e:	78 f3       	brcs	.-34     	; 0x23e <main+0x15c>
			USART_Transmit(resultString[i]);
		}
		
		USART_Transmit(width / 10 + '0');
 260:	fd ec       	ldi	r31, 0xCD	; 205
 262:	9f 9e       	mul	r9, r31
 264:	11 2d       	mov	r17, r1
 266:	11 24       	eor	r1, r1
 268:	16 95       	lsr	r17
 26a:	16 95       	lsr	r17
 26c:	16 95       	lsr	r17
 26e:	80 e3       	ldi	r24, 0x30	; 48
 270:	81 0f       	add	r24, r17
 272:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
		USART_Transmit(width % 10 +'0');
 276:	11 0f       	add	r17, r17
 278:	81 2f       	mov	r24, r17
 27a:	88 0f       	add	r24, r24
 27c:	88 0f       	add	r24, r24
 27e:	18 0f       	add	r17, r24
 280:	89 2d       	mov	r24, r9
 282:	81 1b       	sub	r24, r17
 284:	80 5d       	subi	r24, 0xD0	; 208
 286:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
		USART_Transmit('.');
 28a:	8e e2       	ldi	r24, 0x2E	; 46
 28c:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>
		USART_Transmit(' ');
 290:	80 e2       	ldi	r24, 0x20	; 32
 292:	0e 94 61 00 	call	0xc2	; 0xc2 <USART_Transmit>

		pulse_width = 0;
 296:	81 2c       	mov	r8, r1
 298:	91 2c       	mov	r9, r1

    }
 29a:	6f cf       	rjmp	.-290    	; 0x17a <main+0x98>

0000029c <__umulhisi3>:
 29c:	a2 9f       	mul	r26, r18
 29e:	b0 01       	movw	r22, r0
 2a0:	b3 9f       	mul	r27, r19
 2a2:	c0 01       	movw	r24, r0
 2a4:	a3 9f       	mul	r26, r19
 2a6:	70 0d       	add	r23, r0
 2a8:	81 1d       	adc	r24, r1
 2aa:	11 24       	eor	r1, r1
 2ac:	91 1d       	adc	r25, r1
 2ae:	b2 9f       	mul	r27, r18
 2b0:	70 0d       	add	r23, r0
 2b2:	81 1d       	adc	r24, r1
 2b4:	11 24       	eor	r1, r1
 2b6:	91 1d       	adc	r25, r1
 2b8:	08 95       	ret

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
